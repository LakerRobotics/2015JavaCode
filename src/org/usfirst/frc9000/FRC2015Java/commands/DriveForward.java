// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9000.FRC2015Java.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc9000.FRC2015Java.MotionControlHelper;
import org.usfirst.frc9000.FRC2015Java.MotionControlPIDController;
import org.usfirst.frc9000.FRC2015Java.Robot;
import org.usfirst.frc9000.FRC2015Java.RobotDriveStraightPIDOutput;
import org.usfirst.frc9000.FRC2015Java.RobotMap;
import org.usfirst.frc9000.FRC2015Java.rotateRobotPIDOutput;

/**
*
*/
public class  DriveForward extends Command {
    MotionControlHelper motionControlHelper = null  ;
//TODO    private final PIDController drivePowerPID;
    // Use these to get going:
    // setSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // enable() - Enables the PID controller.
    double distance = 36; //inches
    MotionControlPIDController mcPID;
    
   public DriveForward() {
       // Use requires() here to declare subsystem dependencies
       // eg. requires(chassis);

       // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
       this.setTimeout(5.0d);  // going to drive forward for 3 seconds
   }

   // Called just before this Command runs the first time
   protected void initialize() {
   	RobotMap.driveGyro.reset();
    RobotMap.driveLeftWheelsEncoder.reset();
    RobotMap.driveRightWheelsEncoder.reset();
    double maxspeed = 28; //in/sec
    double ramp = 6; //inches
    double start = 0; //inches
    RobotMap.driveLeftWheelsEncoder.setPIDSourceParameter(PIDSource.PIDSourceParameter.kRate);

    MotionControlHelper motionControl = new MotionControlHelper(distance, ramp, maxspeed, start,
    		                                    RobotMap.driveLeftWheelsEncoder,new RobotDriveStraightPIDOutput());
	double targetTolerance = 1 ; //inch
    
    final double Kp = 0.02;
    final double Ki = 0.002;
    final double Kd = 0.0;

	mcPID = new MotionControlPIDController(Kp,Ki,Kd, motionControl );
    mcPID.setAbsoluteTolerance(targetTolerance);
    mcPID.setOutputRange(-0.6, 0.6);
    
   }

   // Called repeatedly when this Command is scheduled to run
   protected void execute() {
  		mcPID.enable();

	   double angle = RobotMap.driveGyro.getAngle(); // get current heading
       SmartDashboard.putNumber("angle", angle);
       
       //double targetSpeed = motionControlHelper.getTargetSpeed(RobotMap.driveLeftWheelsEncoder.getDistance());
//       RobotMap.driveLeftWheelsEncoder.getRate().
//ToDo       drivePowerPID = new PIDController(Kp, Ki, Kd, leftEncoder, left);

       //Timer.delay(0.004);
       SmartDashboard.putNumber("Left",RobotMap.driveLeftWheelsEncoder.getDistance());
       SmartDashboard.putNumber("Right",RobotMap.driveRightWheelsEncoder.getDistance());
       SmartDashboard.putNumber("Left Rate",RobotMap.driveLeftWheelsEncoder.getRate());
//       SmartDashboard.putNumber("Left Target Rate",targetSpeed);
       SmartDashboard.putNumber("Time",this.timeSinceInitialized());
       System.out.println("Time="+this.timeSinceInitialized()
                         +" encoderDist="+RobotMap.driveLeftWheelsEncoder.getDistance()
//                         +" Left Target Rate="+targetSpeed);
);       
            

   }

   // Make this return true when this Command no longer needs to run execute()
   protected boolean isFinished() {
	   if(RobotMap.driveLeftWheelsEncoder.getDistance()>distance) {
	   		mcPID.disable();
//   		mcPID.getError()
   		    System.out.println("DriveForward isFinished true");  
    	  	RobotMap.driveRobotDrive.tankDrive(0,0);
		   return true;

	   } 
	   else {
           return this.isTimedOut();
	   }
   }

   // Called once after isFinished returns true
   protected void end() {
  		mcPID.disable();
   	// Nothing needs to be done
   }

   // Called when another command which requires one or more of the same
   // subsystems is scheduled to run
   protected void interrupted() {
  		mcPID.disable();
   	// Nothing needs to be done
   }
}
