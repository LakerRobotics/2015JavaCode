// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9000.FRC2015Java.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc9000.FRC2015Java.MotionControlHelper;
import org.usfirst.frc9000.FRC2015Java.MotionControlPIDController;
import org.usfirst.frc9000.FRC2015Java.Robot;
import org.usfirst.frc9000.FRC2015Java.RobotMap;
import org.usfirst.frc9000.FRC2015Java.rotateRobotPIDOutput;

/**
*
*/
public class  Turn90Degrees extends Command {

	double turn = 90;//default in degrees
	double targetTolerance = 10 ; //degrees

    double     ramp =  45; //degrees
    double maxspeed = 150; //degrees/sec
    double    start =   0; //degrees
    MotionControlHelper motionControl; 
    
    final double Kp = 0.005;
    final double Ki = 0.0005;
    final double Kd = 0.0;
    MotionControlPIDController mcPID;
    

	   public Turn90Degrees(double a_turn) {
		   turn = a_turn;
	       // Use requires() here to declare subsystem dependencies
	       // eg. requires(chassis);

	       // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        motionControl = new MotionControlHelper(turn, ramp, maxspeed, start,RobotMap.driveGyro,new rotateRobotPIDOutput());
    	mcPID = new MotionControlPIDController(Kp,Ki,Kd, motionControl );
            
	   }
    
   public Turn90Degrees() {
       // Use requires() here to declare subsystem dependencies
       // eg. requires(chassis);

       // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        motionControl = new MotionControlHelper(turn, ramp, maxspeed, start,RobotMap.driveGyro,new rotateRobotPIDOutput());
    	mcPID = new MotionControlPIDController(Kp,Ki,Kd, motionControl );
          
   }

   // Called just before this Command runs the first time
   protected void initialize() {
   	RobotMap.driveGyro.reset();
   	
    mcPID.setAbsoluteTolerance(targetTolerance);
//    mcPID.free();
    mcPID.setOutputRange(-1.0, 1.0);
    mcPID.enable();
   }

   // Called repeatedly when this Command is scheduled to run
   protected void execute() {
   	
   	double currentAngle= RobotMap.driveGyro.getAngle();
    double targetSpeed = motionControl.getTargetSpeed(currentAngle);   	
    SmartDashboard.putNumber("angle",currentAngle);
    SmartDashboard.putNumber("Gyro Rate",RobotMap.driveGyro.getRate());
    SmartDashboard.putNumber("Gryro Target Rate",targetSpeed);
    SmartDashboard.putNumber("Time",this.timeSinceInitialized());
   }  

   // Make this return true when this Command no longer needs to run execute()
   protected boolean isFinished() {
   	//if(Math.abs(RobotMap.driveGyro.getAngle() - turn)<targetTolgerance) {
   	if(Math.abs(RobotMap.driveGyro.getAngle()) > Math.abs(turn)) { //TODO make it within tolerance
   		mcPID.disable();
//   		mcPID.getError()
   		System.out.println("isFinished true");  
   	  	RobotMap.driveRobotDrive.tankDrive(0,0);
   		return true;
   	}
   	else{
           return false;
   	}

   }

   // Called once after isFinished returns true
   protected void end() {
		mcPID.disable();
   }

   // Called when another command which requires one or more of the same
   // subsystems is scheduled to run
   protected void interrupted() {
  		mcPID.disable();
   }
}
