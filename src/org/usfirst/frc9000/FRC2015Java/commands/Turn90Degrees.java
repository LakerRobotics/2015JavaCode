// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc9000.FRC2015Java.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc9000.FRC2015Java.MotionControlHelper;
import org.usfirst.frc9000.FRC2015Java.MotionControlPIDController;
import org.usfirst.frc9000.FRC2015Java.Robot;
import org.usfirst.frc9000.FRC2015Java.RobotMap;
import org.usfirst.frc9000.FRC2015Java.rotateRobotPIDOutput;

/**
*
*/
public class  Turn90Degrees extends Command {

	double turn = -90;
	MotionControlPIDController mcPID;
    MotionControlHelper motionControl   ;
   public Turn90Degrees() {
       // Use requires() here to declare subsystem dependencies
       // eg. requires(chassis);

       // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    
   }

   // Called just before this Command runs the first time
   protected void initialize() {
   	RobotMap.driveGyro.reset();
   	
    double distance = -180; //degrees
    double ramp = 30; //degrees
    double speed = -20; //degrees/sec
    double start = 0; //degrees
    motionControl = new MotionControlHelper(distance, ramp, speed, start);
    
    final double Kp = 5.0;
    final double Ki = 0.0;
    final double Kd = 0.0;
    
    MotionControlPIDController mcPID = new MotionControlPIDController(Kp,Ki,Kd,
    		RobotMap.driveGyro, new rotateRobotPIDOutput(), motionControl );
    mcPID.setOutputRange(-.60, .60);
    mcPID.enable();
   }

   // Called repeatedly when this Command is scheduled to run
   protected void execute() {
//   	double rotateValue = -.6;
//   	double moveValue = 0;
//   	RobotMap.driveRobotDrive.arcadeDrive(moveValue, rotateValue);
//	double motorspeed = -0.6;   
//   	RobotMap.driveRobotDrive.tankDrive(motorspeed,-motorspeed);
   	
   	double currentAngle= RobotMap.driveGyro.getAngle();
    double targetSpeed = motionControl.getTargetSpeed(currentAngle);   	
    SmartDashboard.putNumber("Gyro Rate",RobotMap.driveGyro.getRate());
    SmartDashboard.putNumber("Gryro Target Rate",targetSpeed);
    SmartDashboard.putNumber("Time",this.timeSinceInitialized());
    System.out.println("Time="+this.timeSinceInitialized()
                      +" encoderDist="+RobotMap.driveLeftWheelsEncoder.getDistance()
                      +" Left Target Rate="+targetSpeed);

   	
   }  

   // Make this return true when this Command no longer needs to run execute()
   protected boolean isFinished() {
       SmartDashboard.putNumber("angle", RobotMap.driveGyro.getAngle());

   	if(RobotMap.driveGyro.getAngle() < turn) {
   		return true;
   	}
   	else{
           return false;
   	}

   }

   // Called once after isFinished returns true
   protected void end() {
	   mcPID.disable();
   }

   // Called when another command which requires one or more of the same
   // subsystems is scheduled to run
   protected void interrupted() {
	   mcPID.disable();
   }
}
